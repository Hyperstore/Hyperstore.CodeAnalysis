using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Hyperstore.CodeAnalysis.Compilation;
using Hyperstore.CodeAnalysis.Symbols;

namespace Hyperstore.CodeAnalysis.Generation
{
    internal class CSharpGenerator : Hyperstore.CodeAnalysis.Generation.IGenerator
    {
        private HyperstoreGeneratorContext ctx;
        protected IDomainSymbol Domain { get; set; }

        private string GetCardinalityAsString(RelationshipCardinality cardinality)
        {
            switch (cardinality)
            {
                case RelationshipCardinality.OneToOne:
                    return "OneToOne";
                case RelationshipCardinality.ManyToOne:
                    return "ManyToOne";
                case RelationshipCardinality.OneToMany:
                    return "OneToMany";
                case RelationshipCardinality.ManyToMany:
                    return "ManyToMany";
            }
            return null;
        }

        public void StartGenerate(HyperstoreGeneratorContext ctx)
        {
            this.ctx = ctx;

            using (ctx.Push(GenerationScope.Begin))
            {
                ctx.WriteLine(0, "// This file was generated by a tool");
                ctx.WriteLine(0, "// Don't edit this file or your changes will be lost.");
                ctx.WriteLine();

                ctx.WriteLine(0, "using System;");
                ctx.WriteLine(0, "using System.Linq;");
                ctx.WriteLine(0, "using System.Collections.Generic;");
                ctx.WriteLine(0, "using Hyperstore.Modeling;");
                ctx.WriteLine(0, "using Hyperstore.Modeling.HyperGraph;");
                ctx.WriteLine(0, "using Hyperstore.Modeling.Metadata;");
                ctx.WriteLine(0, "using Hyperstore.Modeling.Commands;");
                ctx.WriteLine(0, "using Hyperstore.Modeling.Events;");
                ctx.WriteLine();
            }
        }

        public void EndGenerate()
        {

        }

        public void GenerateCode(IDomainSymbol domain)
        {
            if (domain == null || domain.Skip)
                return;

            Domain = domain;
            var elements = domain.Elements.Where(e => !e.Skip);

            if (elements.Count() > 0)
            {
                using (ctx.Push(GenerationScope.MetadataOnBeforeLoad))
                {
                    ctx.WriteLine(2, "protected override void OnSchemaLoaded(ISchema schema)");
                    ctx.WriteLine(2, "{{");
                    ctx.WriteLine(3, "base.OnSchemaLoaded(schema);");

                    foreach (var clazz in elements)
                    {
                        foreach (var constraint in clazz.Constraints)
                        {
                            if (constraint.Kind == ConstraintKind.Check)
                            {
                                ctx.WriteLine(3, "{0}.AddImplicitConstraint<{3}>( {1}, \"{2}\"){4}.Register();", clazz.AsDefinitionVariable(Domain), constraint.Condition.Script, constraint.Message, clazz.Name, constraint.AsError ? String.Empty : ".AsWarning()");
                            }
                            else if (constraint.Kind == ConstraintKind.Validate)
                            {
                                ctx.WriteLine(3, "{0}.AddConstraint<{3}>( {1}, \"{2}\"){4}.Register();", clazz.AsDefinitionVariable(Domain), constraint.Condition.Script, constraint.Message, clazz.Name, constraint.AsError ? String.Empty : ".AsWarning()");
                            }
                        }
                    }

                    ctx.WriteLine();
                }
            }

            using (ctx.Push(GenerationScope.Begin))
            {
                if (!String.IsNullOrWhiteSpace(domain.Namespace))
                {
                    ctx.WriteLine(0, "namespace {0}", domain.Namespace);
                    ctx.WriteLine(0, "{{");
                }

                var observable = domain.IsObservable ? " | DomainBehavior.Observable" : String.Empty;

                ctx.WriteLine(1, "public partial class {0}Definition : Abstract{0}Definition", domain.Name);
                ctx.WriteLine(1, "{{");
                ctx.WriteLine(2, "public {0}Definition() : this(\"{1}\", DomainBehavior.Standard)", domain.Name, domain.Namespace);
                ctx.WriteLine(2, "{{ }}");
                ctx.WriteLine(2, "public {0}Definition(ISchemaDefinition desc) : this(\"{1}\", DomainBehavior.Standard, desc)", domain.Name, domain.Namespace);
                ctx.WriteLine(2, "{{ }}");
                ctx.WriteLine();
                ctx.WriteLine(2, "public {0}Definition(string name, DomainBehavior behavior=DomainBehavior.Standard, ISchemaDefinition desc=null) : base(name, behavior{1}, desc)", domain.Name, observable);
                ctx.WriteLine(2, "{{ }}");
                ctx.WriteLine(1, "}}");
                ctx.WriteLine();

                ctx.WriteLine(1, "public abstract class Abstract{0}Definition : SchemaDefinition", domain.Name);
                ctx.WriteLine(1, "{{");

                ctx.WriteLine(2, "protected Abstract{0}Definition(string name, DomainBehavior behavior, ISchemaDefinition desc=null) : base(name, behavior, desc)", domain.Name);
                ctx.WriteLine(2, "{{}}");
                ctx.WriteLine();

                using (ctx.Push(GenerationScope.MetadataDefinitionBegin))
                {
                    if (domain.ExtendedDomainPath != null || domain.Usings.Any())
                    {
                        ctx.WriteLine();
                        ctx.WriteLine(2, "protected override global::System.Collections.Generic.IEnumerable<ISchemaDefinition> GetDependentSchemas()");
                        ctx.WriteLine(2, "{{");
                        if (domain.ExtendedDomainPath != null)
                        {
                            var x = ctx.Compilation.ResolveDomain(domain, domain.ExtendedDomainPath);
                            ctx.WriteLine(3, "yield return new {0}Definition(this);", x.QualifiedName);
                        }
                        foreach (var uses in domain.Usings)
                        {
                            var x = ctx.Compilation.ResolveDomain(domain, uses.DomainUri);
                            ctx.WriteLine(3, "yield return new {0}Definition(this);", x.QualifiedName);
                        }
                        ctx.WriteLine(2, "}}");
                    }
                    ctx.WriteLine();
                    ctx.WriteLine();
                    ctx.WriteLine(2, "protected override void DefineSchema(ISchema schema)");
                    ctx.WriteLine(2, "{{");

                    foreach (var child in domain.Externals)
                    {
                        GenerateCode(child);
                    }
                }
            }

            using (ctx.Push(GenerationScope.NewScope))
            {
                ctx.WriteLine();

                foreach (var child in domain.ValueObjects)
                {
                    GenerateCode(child);
                }

                var set = new HashSet<IElementSymbol>();
                // D'abord les classes
                foreach (var n in elements.OfType<EntitySymbol>().Where(c => !c.Skip))
                {
                    GenerateClassCode(n, set);
                }

                set = new HashSet<IElementSymbol>();
                // Puis les relations
                foreach (var n in elements.OfType<RelationshipSymbol>().Where(c => !c.Skip))
                {
                    GenerateClassCode(n, set);
                }

                foreach (var n in elements.OfType<IEnumSymbol>().Where(e => !e.Skip))
                {
                    GenerateCode(n);
                }

                foreach (var c in Domain.Commands.Where(e => !e.Skip))
                {
                    GenerateCode(c);
                }

                if (!String.IsNullOrWhiteSpace(domain.Namespace))
                {
                    ctx.WriteLine(0, "}}");
                    ctx.WriteLine();
                }
            }

            if (elements.Count() > 0)
            {
                using (ctx.Push(GenerationScope.MetadataDefinitionEnd))
                {
                    ctx.WriteLine(2, "}}");
                    ctx.WriteLine();
                }
            }

            using (ctx.Push(GenerationScope.MetadataOnBeforeLoad))
            {
                ctx.WriteLine(2, "}}");
                ctx.WriteLine(1, "}}");
            }
        }

        private void GenerateCode(IValueObjectSymbol valueObject)
        {
            using (ctx.Push(GenerationScope.MetadataDefinitionBegin))
            {
                using (ctx.Push(GenerationScope.Begin))
                {
                    ctx.WriteLine(2, "public {0}Schema {0}Schema {{ get; protected set; }}", valueObject.Name);
                }

                ctx.WriteLine(3, "{0}Schema = new {0}Schema(schema);", valueObject.Name);
            }

            using (ctx.Push(GenerationScope.NewScope))
            {
                var type = valueObject.Type as IExternSymbol;

                var hasValidationConstraints = valueObject.Constraints.Any(c => c.Kind == ConstraintKind.Validate);
                var constraintType = hasValidationConstraints ? "IValidationValueObjectConstraint" : "ICheckValueObjectConstraint";
                ctx.WriteLine(1, "public sealed partial class {0}Schema : Hyperstore.Modeling.Metadata.SchemaValueObject<{1}>, global::Hyperstore.Modeling.Metadata.Constraints.{2}<{1}>", valueObject.Name, type.FullName, constraintType);
                ctx.WriteLine(1, "{{");

                ctx.WriteLine(2, "protected {0}Schema()", valueObject.Name);
                ctx.WriteLine(2, "{{}}");
                ctx.WriteLine();


                ctx.WriteLine(2, "public {0}Schema(ISchema schema)", valueObject.Name);
                ctx.WriteLine(3, ": base(schema)");
                ctx.WriteLine(2, "{{}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "protected override object Deserialize(SerializationContext ctx)");
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "return Hyperstore.Modeling.Metadata.Primitives.{0}Primitive.DeserializeValue(ctx);", TypeToPrimitive(type));
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "protected override string Serialize(object data, IJsonSerializer serializer)");
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "return Hyperstore.Modeling.Metadata.Primitives.{0}Primitive.SerializeValue(data);", TypeToPrimitive(type));
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "public void ExecuteConstraint({0} value, {0} oldValue, global::Hyperstore.Modeling.Metadata.Constraints.ConstraintContext ctx)", type.FullName);
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "Func<{0}, bool> condition;", type.FullName);

                foreach (var constraint in valueObject.Constraints.Where(c => c.Kind == ConstraintKind.Check))
                {
                    WriteConstraint(3, constraint);
                }

                if (hasValidationConstraints)
                {
                    ctx.WriteLine(3, "if( ctx.ConstraintKind == global::Hyperstore.Modeling.Metadata.Constraints.ConstraintKind.Validate )");
                    ctx.WriteLine(3, "{{");
                    foreach (var constraint in valueObject.Constraints.Where(c => c.Kind == ConstraintKind.Validate))
                    {
                        WriteConstraint(4, constraint);
                    }
                    ctx.WriteLine(3, "}}");
                    ctx.WriteLine(2, "}}");

                    ctx.WriteLine();

                    ctx.WriteLine(2, "public string Category");
                    ctx.WriteLine(2, "{{");
                    ctx.WriteLine(3, "get {{ return null; }}");
                }

                ctx.WriteLine(2, "}}");
                ctx.WriteLine(1, "}}");
            }
        }

        private string TypeToPrimitive(IExternSymbol type)
        {
            switch (type.Alias)
            {
                case "string":
                    return "String";
                case "int":
                    return "Int32";
                case "bool":
                    return "Boolean";
                case "char":
                    return "Char";
                case "decimal":
                    return "Decimal";
                case "double":
                    return "Double";
                case "float":
                    return "Single";
                case "Guid":
                case "Int16":
                case "Int32":
                case "Int64":
                case "UInt16":
                case "UInt32":
                case "UInt64":
                case "DateTime":
                case "TimeSpan":
                    break;
            }
            return type.Alias;
        }

        private void WriteConstraint(int indent, IConstraintSymbol constraint)
        {
            ctx.WriteLine(indent, "condition = {0};", constraint.Condition.Script);
            ctx.WriteLine(indent, "if( condition(value) == false )");
            ctx.WriteLine(indent, "{{");
            ctx.WriteLine(indent + 1, "ctx.Create{0}Message(\"{1}\");", constraint.AsError ? "Error" : "Warning", constraint.Message);
            ctx.WriteLine(indent, "}}");
        }

        private void GenerateClassCode(IElementSymbol n, HashSet<IElementSymbol> set)
        {
            if (n == null) // External domain
                return;

            if (!set.Add(n))  // Already generated
                return;

            // First the entity the current entity inherit from
            if (n.SuperType != null && n.SuperType.Domain == n.Domain)
                GenerateClassCode(n.SuperType as IElementSymbol, set);

            GenerateCode(n);
        }

        private void GenerateCode(IElementSymbol clazz)
        {
            using (ctx.Push(GenerationScope.MetadataDefinitionBegin))
            {
                GenerateDefinition(clazz);
            }

            using (ctx.Push(GenerationScope.MetadataDefinitionEnd))
            {
                foreach (var prop in clazz.Properties.Where(p => !p.Skip))
                {
                    if (prop.PropertyType is RelationshipSymbol || prop.IsCalculatedProperty)
                        continue;

                    var defaultValue = String.Empty;
                    if (prop.DefaultValue != null)
                        defaultValue = ", " + prop.DefaultValue.Script;

                    var ext = prop.PropertyType as ExternSymbol;
                    if (ext != null && ext.Kind != ExternalKind.Primitive && ext.Kind != ExternalKind.Enum)
                    {
                        ctx.WriteLine(3, "((ISchemaElement){0}).DefineProperty(\"{1}\",{2}Schema{3});", clazz.AsDefinitionVariable(Domain), prop.PropertyType.Name, ext.Alias, defaultValue);
                    }
                    else if (prop.PropertyType is IValueObjectSymbol)
                    {
                        ctx.WriteLine(3, "((ISchemaElement){0}).DefineProperty(\"{1}\",{2}Schema{3});", clazz.AsDefinitionVariable(Domain), prop.PropertyType.Name, prop.PropertyType.Name, defaultValue);
                    }
                    else
                    {
                        ctx.WriteLine(3, "((ISchemaElement){0}).DefineProperty<{1}>(\"{2}\"{3});", clazz.AsDefinitionVariable(Domain), prop.PropertyType.AsFullName(), prop.Name, defaultValue);
                    }
                }
            }


            // Déclaration des classes
            using (ctx.Push(GenerationScope.NewScope))
            {
                var extends = new StringBuilder();
                if (clazz.SuperType != null)
                {
                    extends.Append(": ");
                    extends.Append(clazz.SuperType.AsFullName());
                }
                else if (!Domain.IsDynamic)
                {
                    extends.Append(": ");
                    extends.Append(clazz is IEntitySymbol ? "global::Hyperstore.Modeling.ModelEntity" : "global::Hyperstore.Modeling.ModelRelationship");
                }

                if (Domain.IsObservable && !Domain.IsDynamic)
                    extends.Append(", System.ComponentModel.INotifyPropertyChanged");

                if( clazz.Properties.Any(p=>p.Name == "Name" && p.PropertyType.Name=="string"))
                    extends.Append(", Hyperstore.Modeling.INamedElement");

                foreach (var att in clazz.Attributes.Where(a => a.Name == "attribute"))
                {
                    ctx.WriteLine(1, "[{0}]", att.Arguments.First().Replace(@"\""", "\""));
                }

                if (clazz.Implements != null)
                {
                    var str = String.Join(", ", clazz.Implements.Distinct().Select(e => e.AsFullName()).ToArray());
                    if (!String.IsNullOrEmpty(str))
                    {
                        if (extends.Length > 0)
                            extends.Append(", ");
                        else
                            extends.Append(": ");
                        extends.Append(str);
                    }
                }

                var mod = clazz.Attributes.FirstOrDefault(a => a.Name == "modifier");
                if (Domain.IsDynamic)
                    ctx.WriteLine(1, "{2} partial interface {0} {1}", clazz.Name, extends, mod == null ? "public" : mod.Arguments.First());
                else
                    ctx.WriteLine(1, "{2} partial class {0} {1}", clazz.Name, extends, mod == null ? "public" : mod.Arguments.First());

                ctx.WriteLine(1, "{{");

                if (!Domain.IsDynamic)
                {

                    var propertyReferences = clazz
                                        .References.Where(r => r.Relationship is RelationshipSymbol).Select(r => new { Name = r.Name, Relationship = r.Relationship, Opposite = false, WhereClause = (string)null });
                    var opposites = clazz
                                        .OppositeReferences.Where(r => r.Relationship is RelationshipSymbol).Select(r => new { Name = r.Name, Relationship = r.Relationship, Opposite = true, WhereClause = (string)null });
                    var properties = clazz
                                        .Properties.Where(r => r.PropertyType is RelationshipSymbol && !r.IsCalculatedProperty).Select(r => new { Name = r.Name, Relationship = r.PropertyType as IRelationshipSymbol, Opposite = false, WhereClause = r.WhereClause.Script });

                    var references = properties.Concat(propertyReferences).Concat(opposites);

                    if (references.Any())
                    {
                        foreach (var reference in references)
                        {
                            GenerateReferenceFields(reference.Relationship, reference.Name, reference.Opposite, reference.WhereClause != null);
                        }
                        ctx.WriteLine();

                        ctx.WriteLine(2, "protected override void Initialize(ISchemaElement metadata, IDomainModel domainModel)");
                        ctx.WriteLine(2, "{{");
                        ctx.WriteLine(3, "base.Initialize(metadata, domainModel);");
                        var disposables = new List<string>();

                        foreach (var reference in references)
                        {
                            disposables.Add(GenerateReferenceInit(reference.Relationship, reference.Name, reference.WhereClause, reference.Opposite));
                        }

                        ctx.WriteLine(2, "}}");
                        ctx.WriteLine();

                        ctx.WriteLine(2, "protected override void Dispose(bool disposing)");
                        ctx.WriteLine(2, "{{");
                        ctx.WriteLine(3, "base.Dispose(disposing);");
                        ctx.WriteLine();
                        ctx.WriteLine(3, "IDisposable disposable = null;");
                        foreach (var d in disposables)
                        {
                            ctx.WriteLine(3, "disposable = {0} as IDisposable;", d);
                            ctx.WriteLine(3, "if( disposable != null)");
                            ctx.WriteLine(4, "disposable.Dispose();");
                        }
                        ctx.WriteLine(2, "}}");
                    }
                }

                ctx.WriteLine();

                if (!Domain.IsDynamic)
                    GenerateConstructor(clazz);

                if (clazz.References != null)
                {
                    foreach (var reference in clazz.References)
                    {
                        GeneratePropertyAttributes(reference);
                        GenerateCode(reference);
                    }
                }

                if (clazz.OppositeReferences != null)
                {
                    foreach (var opposite in clazz.OppositeReferences)
                    {
                        GeneratePropertyAttributes(opposite);
                        GenerateCode(opposite);
                    }
                }

                if (clazz.Properties != null)
                {
                    foreach (var prop in clazz.Properties)
                    {
                        GeneratePropertyAttributes(prop);
                        GenerateCode(prop);
                    }
                }

                ctx.WriteLine(1, "}}");
                ctx.WriteLine();
            }
        }

        private void GeneratePropertyAttributes(INamedSymbol symbol)
        {
            foreach (var att in symbol.Attributes.Where(a => a.Name == "attribute"))
            {
                ctx.WriteLine(2, "[{0}]", att.Arguments.First().Replace(@"\""", "\""));
            }
        }

        private void GenerateCode(ICommandSymbol command)
        {
            using (ctx.Push(GenerationScope.NewScope))
            {
                ctx.WriteLine(0, "namespace Commands {{");

                ctx.WriteLine(1, "public abstract partial class {0}CommandBase : AbstractDomainCommand, ICommandHandler<{0}Command>", command.Name);
                ctx.WriteLine(1, "{{");

                // Nom du 1er paramètre qui est une entité
                string entityArg = null;
                if (command.Properties != null)
                {
                    foreach (var prop in command.Properties)
                    {
                        GeneratePropertyAttributes(prop);

                        var mod = prop.Attributes.FirstOrDefault(a => a.Name == "modifier");
                        ctx.WriteLine(2, "{2} {0} {1} {{ get; protected set;}}", prop.PropertyType.AsFullName(), prop.Name, mod == null ? "public" : mod.Arguments.First());
                        if (prop.IsEntity && entityArg == null)
                            entityArg = prop.Name;
                    }
                    ctx.WriteLine();
                }

                ctx.WriteLine(2, "protected {0}CommandBase(IDomainModel domain)", command.Name);
                ctx.WriteLine(3, ": base(domain)");
                ctx.WriteLine(2, "{{}}");
                ctx.WriteLine();

                // Handler
                ctx.WriteLine(2, "IEvent ICommandHandler<{0}Command>.Handle(ExecutionCommandContext<{0}Command> context)", command.Name);
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "return HandleCommand(context);");
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "protected virtual IEvent HandleCommand(ExecutionCommandContext<{0}Command> context)", command.Name);
                ctx.WriteLine(2, "{{");

                ctx.Write(3, "return new global::{0}.Events.{1}Event(DomainModel, ", Domain.Namespace, command.Name);
                foreach (var att in command.Properties)
                {
                    if (att.IsEntity)
                    {
                        ctx.Write("((IModelElement){0}).Id, ((IModelElement){0}).SchemaInfo.Id, ", att.Name);
                    }
                    else
                    {
                        ctx.Write("{0}, ", att.Name);
                    }
                }
                ctx.WriteLine(0, "context.CurrentSession.SessionId);");

                ctx.WriteLine(2, "}}");
                ctx.WriteLine(1, "}}");

                ctx.WriteLine();

                ctx.WriteLine(1, "public partial class {0}Command : {0}CommandBase", command.Name);
                ctx.WriteLine(1, "{{");

                // Génération du ctor
                ctx.Write(2, "public {0}Command(", command.Name);

                bool first = true;
                if (entityArg == null)
                {
                    ctx.Write("IDomainModel domain");
                    first = false;
                }

                foreach (var att in command.Properties)
                {
                    if (!first)
                    {
                        ctx.Write(", ");
                    }
                    first = false;
                    if (!att.IsEntity)
                    {
                        ctx.Write("{0} {1}", att.PropertyType.AsFullName(), att.Name);
                    }
                    else
                    {
                        ctx.Write("{0} {0}", att.Name);
                    }
                }
                ctx.Write(")");
                ctx.WriteLine();
                if (entityArg == null)
                {
                    ctx.Write(3, ": base(domain)");
                }
                else
                {
                    ctx.Write(3, ": base(((IModelElement){0}).DomainModel)", entityArg);
                }

                ctx.WriteLine();

                ctx.WriteLine(2, "{{");
                foreach (var att in command.Properties)
                {
                    if (att.IsEntity)
                    {
                        ctx.WriteLine(3, "if( {0} == null)", att.Name);
                        ctx.WriteLine(4, "throw new ArgumentNullException(\"{0}\");", att.Name);
                    }
                    ctx.WriteLine(3, "this.{0} = {0};", att.Name);
                }
                ctx.WriteLine(2, "}}");
            }

            ctx.WriteLine(1, "}}");

            ctx.WriteLine();

            ctx.WriteLine(0, "}}");

            ctx.WriteLine(0, "namespace Events {{");


            ctx.WriteLine(1, "public partial class {0}Event : AbstractDomainEvent", command.Name);
            ctx.WriteLine(1, "{{");

            if (command.Attributes != null)
            {
                foreach (var att in command.Properties)
                {
                    if (!att.IsEntity)
                    {
                        ctx.WriteLine(2, "public {0} {1} {{get; set;}}", att.PropertyType.AsFullName(), att.Name);
                    }
                    else
                    {
                        ctx.WriteLine(2, "public Identity {0}Id {{get; set;}}", att.Name);
                        ctx.WriteLine(2, "public Identity {0}SchemaId {{get; set;}}", att.Name);
                    }
                }
                ctx.WriteLine();
            }

            ctx.Write(2, "public {0}Event(IDomainModel domain, ", command.Name);
            foreach (var att in command.Properties)
            {
                if (att.IsEntity)
                {
                    ctx.Write("Identity {0}Id, Identity {0}schemaId, ", att.Name);
                }
                else
                {
                    ctx.Write("{0} {1}, ", att.PropertyType.AsFullName(), att.Name);
                }
            }

            ctx.WriteLine(0, "Guid correlationId, long? version=null)");
            ctx.WriteLine(3, ": base(domain.Name, domain.ExtensionName, version ?? DateTime.UtcNow.Ticks, correlationId)");

            ctx.WriteLine(2, "{{");
            foreach (var att in command.Properties)
            {
                if (att.IsEntity)
                {
                    ctx.WriteLine(3, "this.{0}Id = {0}Id;", att.Name);
                    ctx.WriteLine(3, "this.{0}SchemaId = {0}SchemaId;", att.Name);
                }
                else
                {
                    ctx.WriteLine(3, "this.{0} = {0};", att.Name);
                }
            }
            ctx.WriteLine(2, "}}");

            ctx.WriteLine(1, "}}");
            ctx.WriteLine(0, "}}");

            ctx.WriteLine();

        }

        private void GenerateReferenceFields(IRelationshipSymbol rel, string rname, bool isOpposite, bool whereClause)
        {
            if (((rel.Definition.Cardinality & RelationshipCardinality.OneToMany) == RelationshipCardinality.OneToMany && !isOpposite) || ((rel.Definition.Cardinality & RelationshipCardinality.ManyToOne) == RelationshipCardinality.ManyToOne && isOpposite))
            {
                var end = isOpposite ? rel.Definition.Source : rel.Definition.End;
                var type = whereClause ? "IEnumerable" : "ICollection";
                ctx.WriteLine(2, "private {2}<{1}> _{0};", rname.ToCamelCase(), end.AsFullName(), type);
            }
            else
            {
                ctx.WriteLine(2, "private ReferenceHandler _{0}Handler;", rname.ToCamelCase());
            }
        }

        private string GenerateReferenceInit(IRelationshipSymbol rel, string rname, string whereClause, bool isOpposite)
        {
            string name = null;
            if (((rel.Definition.Cardinality & RelationshipCardinality.OneToMany) == RelationshipCardinality.OneToMany && !isOpposite) || ((rel.Definition.Cardinality & RelationshipCardinality.ManyToOne) == RelationshipCardinality.ManyToOne && isOpposite))
            {
                var end = isOpposite ? rel.Definition.Source : rel.Definition.End;
                var type = whereClause != null ? "ModelElementList" : "ModelElementCollection";
                var str = Domain.IsObservable ? "Observable" + type : type;
                if (rel is IVirtualRelationshipSymbol)
                {
                    ctx.WriteLine(3, "_{0} = new {1}<{2}>(this, \"{3}\", {4});", rname.ToCamelCase(), str, end.AsFullName(), rel.Name, isOpposite ? "true" : "false");
                    if (whereClause != null)
                    {
                        ctx.WriteLine(3, "((ModelElementList<{1}>)_{0}).WhereClause = {2};", rname.ToCamelCase(), end.AsFullName(), whereClause);
                    }
                }
                else
                {
                    ctx.WriteLine(3, "_{0} = new {1}<{2},{3}>(this, {4});", rname.ToCamelCase(), str, rel.AsFullName(), end.AsFullName(), isOpposite ? "true" : "false");
                    if (whereClause != null)
                    {
                        ctx.WriteLine(3, "((ModelElementList<{1},{2}>)_{0}).WhereClause = {3};", rname.ToCamelCase(), rel.AsFullName(), end.AsFullName(), whereClause);
                    }
                }
                name = String.Format("_{0}", rname.ToCamelCase());
            }
            else
            {
                if (rel is IVirtualRelationshipSymbol)
                    ctx.WriteLine(3, "_{0}Handler = new ReferenceHandler(this, \"{1}\"{2});", rname.ToCamelCase(), rel.Name, isOpposite ? ", true" : String.Empty);
                else
                    ctx.WriteLine(3, "_{0}Handler = new ReferenceHandler<{1}>(this{2});", rname.ToCamelCase(), rel.AsFullName(), isOpposite ? ", true" : String.Empty);
                name = String.Format("_{0}Handler", rname.ToCamelCase());
            }
            return name;
        }

        private void GenerateCode(IReferenceSymbol node)
        {
            var name = node.Name;
            GenerateReferenceProperty(node.Attributes, node.Relationship, name, node is IOppositeReferenceSymbol, false);
            ctx.WriteLine();
        }

        private void GenerateReferencePropertyWithProjection(IEnumerable<IAttributeSymbol> attributes, ITypeSymbol returnType, string name, string selectCode)
        {
            var mod = attributes.FirstOrDefault(a => a.Name == "modifier");

            ctx.WriteLine(2, "{2} IEnumerable<{0}> {1}", returnType.AsFullName(), name, mod == null ? "public" : mod.Arguments.First());
            ctx.WriteLine(2, "{{");
            if (Domain.IsDynamic)
                ctx.WriteLine(3, "get;");
            else
                ctx.WriteLine(3, "get {{ return _{0}.Select({1}); }}", name.ToCamelCase(), selectCode);

            ctx.WriteLine(2, "}}");
        }

        private void GenerateReferenceProperty(IEnumerable<IAttributeSymbol> attributes, IRelationshipSymbol rel, string name, bool isOpposite, bool whereClause)
        {
            var mod = attributes.FirstOrDefault(a => a.Name == "modifier");
            var end = isOpposite ? rel.Definition.Source : rel.Definition.End;
            if (((rel.Definition.Cardinality & RelationshipCardinality.OneToMany) == RelationshipCardinality.OneToMany && !isOpposite) || ((rel.Definition.Cardinality & RelationshipCardinality.ManyToOne) == RelationshipCardinality.ManyToOne && isOpposite))
            {
                var type = whereClause ? "IEnumerable" : "ICollection";
                ctx.WriteLine(2, "{2} {3}<{0}> {1}", end.AsFullName(), name, Domain.IsDynamic ? String.Empty : mod == null ? "public" : mod.Arguments.First(), type);
                ctx.WriteLine(2, "{{");
                if (Domain.IsDynamic)
                    ctx.WriteLine(3, "get;");
                else
                {
                    ctx.WriteLine(3, "get");
                    ctx.WriteLine(3, "{{");

                    ctx.WriteLine(4, "SetCalculatedPropertySource(\"{0}\");", name);
                    ctx.WriteLine(4, "return _{0};", name.ToCamelCase());
                    ctx.WriteLine(3, "}}");
                }
            }
            else
            {
                ctx.WriteLine(2, "{2} {0} {1}", end.AsFullName(), name, Domain.IsDynamic ? String.Empty : mod == null ? "public" : mod.Arguments.First());
                ctx.WriteLine(2, "{{");
                if (Domain.IsDynamic)
                    ctx.WriteLine(3, "get; set;");
                else
                {
                    ctx.WriteLine(3, "get {{ return _{1}Handler.GetReference<{0}>(); }}", end.AsFullName(), name.ToCamelCase());
                    ctx.WriteLine(3, "set {{ _{0}Handler.SetReference(value); }}", name.ToCamelCase());
                }
            }

            ctx.WriteLine(2, "}}");
        }

        private void GenerateCode(IExternSymbol ext)
        {
            if (ext.Kind == ExternalKind.Interface)
                return;

            ctx.Push(GenerationScope.MetadataDefinitionBegin);

            if (ext.Kind == ExternalKind.Enum)
            {

                // ctx.WriteLine(3, "new EnumPrimitive<{0}>(schema);", FullName);
            }
            else
            {
                using (ctx.Push(GenerationScope.Begin))
                {
                    if (Type.GetType(String.Format("{0}Schema", ext.Alias), false) == null)
                    {
                        ctx.WriteLine(2, "// You must provide an implementation for {0}Schema class", ext.Alias);
                        ctx.WriteLine(2, "//public class {0}Schema : SchemaValueObject<{1}>", ext.Alias, ext.FullName);
                        ctx.WriteLine(2, "//{{");
                        ctx.WriteLine(2, "//    public {0}Schema(ISchema schema) : base(schema)", ext.Alias);
                        ctx.WriteLine(2, "//    {{");
                        ctx.WriteLine(2, "//    }}");
                        ctx.WriteLine(2, "//");
                        ctx.WriteLine(2, "//    protected override string Serialize(object data, IJsonSerializer serializer)");
                        ctx.WriteLine(2, "//    {{");
                        ctx.WriteLine(2, "//        if (data == null) return null;");
                        ctx.WriteLine(2, "//        return <You custom code here>;");
                        ctx.WriteLine(2, "//    }}");
                        ctx.WriteLine(2, "//");
                        ctx.WriteLine(2, "//    protected override object Deserialize(SerializationContext ctx)");
                        ctx.WriteLine(2, "//    {{");
                        ctx.WriteLine(2, "//        if (ctx.Value == null)");
                        ctx.WriteLine(2, "//            return null;");
                        ctx.WriteLine(2, "//        return <Your custom code here>;");
                        ctx.WriteLine(2, "//    }}");
                        ctx.WriteLine(2, "//}}");
                    }
                    ctx.WriteLine(2, "public {0}Schema {0}Schema {{get;protected set;}}", ext.Alias);
                }

                ctx.WriteLine(3, "{0}Schema = new {0}Schema(schema);", ext.Alias);
            }

            ctx.WriteLine();
            ctx.Pop();
        }

        private void GenerateCode(IEnumSymbol node)
        {
            ctx.WriteLine();

            using (ctx.Push(GenerationScope.NewScope))
            {
                var mod = node.Attributes.FirstOrDefault(a => a.Name == "modifier");
                ctx.WriteLine(1, "{1} enum {0}", node.Name, mod == null ? "public" : mod.Arguments.First());
                ctx.WriteLine(1, "{{");
                foreach (var v in node.Values)
                {
                    ctx.WriteLine(2, "{0},", v);
                }
                ctx.WriteLine(1, "}}");
            }

            ctx.WriteLine();
        }

        private void GenerateCode(IPropertySymbol prop)
        {
            var type = prop.PropertyType as IRelationshipSymbol;
            if (type != null)
            {
                if (prop.SelectClause != null)
                {
                    GenerateReferencePropertyWithProjection(prop.Attributes, prop.PropertyType, prop.Name, prop.SelectClause.Script);
                }
                else
                {
                    GenerateReferenceProperty(prop.Attributes, type, prop.Name, false, prop.WhereClause != null);
                }
                return;
            }

            var mod = prop.Attributes.FirstOrDefault(a => a.Name == "modifier");
            ctx.WriteLine(2, "{2} {0} {1}", prop.PropertyType.AsFullName(), prop.Name, Domain.IsDynamic ? String.Empty : mod == null ? "public" : mod.Arguments.First());
            ctx.WriteLine(2, "{{");

            var compute = prop.Constraints.FirstOrDefault(c => c.Kind == ConstraintKind.Compute);
            if (compute != null)
            {
                if (Domain.IsDynamic)
                    ctx.WriteLine(3, "get;");
                else
                {
                    ctx.WriteLine(3, "get {{ return CalculatedProperty( {0} ); }}", compute.Condition.Script);
                }
                ctx.WriteLine(2, "}}");
            }
            else
            {
                if (Domain.IsDynamic)
                    ctx.WriteLine(3, "get; set;");
                else
                {
                    ctx.WriteLine(3, "get {{ return GetPropertyValue<{0}>(\"{1}\"); }}", prop.PropertyType.AsFullName(), prop.Name);
                    ctx.WriteLine(3, "set {{ SetPropertyValue(\"{0}\", value); }}", prop.Name);
                }
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();
            }

            var parent = prop.Parent as IElementSymbol;
            var indexAttr = prop.Attributes.FirstOrDefault(a => a.Name == "index");
            if (indexAttr != null)
            {
                var indexName = indexAttr.Arguments.Count() == 2 ? indexAttr.Arguments.Skip(1).First() : String.Format("{0}_{1}_IX", parent.Name, prop.Name);
                using (ctx.Push(GenerationScope.MetadataOnBeforeLoad))
                {
                    ctx.WriteLine(3, "{1} = schema.Indexes.CreateIndex({0}, \"{1}\", {2}, \"{3}\");", parent.AsDefinitionVariable(Domain), indexName, indexAttr.Arguments.First().ToLower(), prop.Name);
                }

                using (ctx.Push(GenerationScope.Begin))
                {
                    ctx.WriteLine(2, "public IIndex {0} {{ get; protected set; }}", indexName);
                }
            }

            if (prop.Constraints.Count() > 0)
            {
                using (ctx.Push(GenerationScope.MetadataOnBeforeLoad))
                {
                    foreach (var constraint in prop.Constraints)
                    {
                        if (constraint.Kind == ConstraintKind.Check)
                        {
                            ctx.WriteLine(3, "{0}.AddImplicitConstraint<{4}>({1}, \"{2}\", \"{3}\"){5}.Register();", parent.AsDefinitionVariable(Domain), constraint.Condition.Script, constraint.Message, prop.Name, parent.Name, constraint.AsError ? String.Empty : ".AsWarning()");
                        }
                        else if (constraint.Kind == ConstraintKind.Validate)
                        {
                            ctx.WriteLine(3, "{0}.AddConstraint<{4}>({1}, \"{2}\", \"{3}\"){5}.Register();", parent.AsDefinitionVariable(Domain), constraint.Condition.Script, constraint.Message, prop.Name, parent.Name, constraint.AsError ? String.Empty : ".AsWarning()");
                        }
                    }
                }
            }
        }

        private void GenerateDefinition(IElementSymbol clazz)
        {
            var super = ", null";
            if (clazz.SuperType != null)
            {
                super = ", " + clazz.SuperType.AsDefinitionVariable(Domain);
            }

            if (clazz is IRelationshipSymbol)
            {
                var rel = clazz as IRelationshipSymbol;

                var startPropertyName = rel.Definition.SourceProperty != null ? ", \"" + rel.Definition.SourceProperty + "\"" : ", null";
                var endPropertyName = rel.Definition.EndProperty != null ? ", \"" + rel.Definition.EndProperty + "\"" : ", null";

                if (clazz is IVirtualRelationshipSymbol || Domain.IsDynamic)
                {
                    ctx.WriteLine(3, "{0} = new SchemaRelationship(\"{0}\", {1}, {2}, Cardinality.{3}, {4}, null{5}{6});", rel.Name, rel.Definition.Source.AsDefinitionVariable(Domain), rel.Definition.End.AsDefinitionVariable(Domain), GetCardinalityAsString(rel.Definition.Cardinality), rel.Definition.IsEmbedded ? "true" : "false", startPropertyName, endPropertyName);

                    using (ctx.Push(GenerationScope.Begin))
                    {
                        ctx.WriteLine(2, "public ISchemaRelationship {0} {{ get; protected set; }}", rel.Name);
                    }
                }
                else
                {
                    ctx.WriteLine(3, "{0} = new SchemaRelationship<{0}>({1}, {2}, Cardinality.{3}, {4}{5}{6}{7});", rel.Name, rel.Definition.Source.AsDefinitionVariable(Domain), rel.Definition.End.AsDefinitionVariable(Domain), GetCardinalityAsString(rel.Definition.Cardinality), rel.Definition.IsEmbedded ? "true" : "false", super, startPropertyName, endPropertyName);

                    using (ctx.Push(GenerationScope.Begin))
                    {
                        ctx.WriteLine(2, "public SchemaRelationship<{0}> {0} {{ get; protected set; }}", rel.Name);
                    }
                }
            }
            else
            {
                if (Domain.IsDynamic)
                {
                    ctx.WriteLine(3, "{0} = new SchemaEntity(schema, \"{0}\"{1});", clazz.Name, super);
                }
                else
                {
                    ctx.WriteLine(3, "{0} = new SchemaEntity<{0}>(schema{1});", clazz.Name, super);
                }

                using (ctx.Push(GenerationScope.Begin))
                {
                    if (Domain.IsDynamic)
                    {
                        ctx.WriteLine(2, "public SchemaEntity {0} {{ get; protected set; }}", clazz.Name);
                    }
                    else
                    {
                        ctx.WriteLine(2, "public SchemaEntity<{0}> {0} {{ get; protected set; }}", clazz.Name);
                    }
                }
            }
        }

        private void GenerateConstructor(IElementSymbol clazz)
        {
            if (clazz is IRelationshipSymbol)
            {
                var rel = clazz as IRelationshipSymbol;
                ctx.WriteLine(2, "public {0} Start", rel.Definition.Source.AsFullName());
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "get {{ return ({0})((IModelRelationship)this).Start; }}", rel.Definition.Source.AsFullName());
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "public {0} End", rel.Definition.End.AsFullName());
                ctx.WriteLine(2, "{{");
                ctx.WriteLine(3, "get {{ return ({0})((IModelRelationship)this).End; }}", rel.Definition.End.AsFullName());
                ctx.WriteLine(2, "}}");
                ctx.WriteLine();

                ctx.WriteLine(2, "protected {0}() {{ }}", rel.Name);
                ctx.WriteLine();

                ctx.WriteLine(2, "public {0}({1} start, {2} end, Identity id=null) : base(start, end)", rel.Name, rel.Definition.Source.Name, rel.Definition.End.Name);
                ctx.WriteLine(2, "{{");
            }
            else
            {
                var baseArgs = clazz.SuperType == null ? "domainModel, null, id" : "domainModel, id";
                ctx.WriteLine(2, "protected {0}() {{}}", clazz.Name);
                ctx.WriteLine();
                ctx.WriteLine(2, "public {0}(IDomainModel domainModel=null, Identity id=null) : base({1})", clazz.Name, baseArgs);
                ctx.WriteLine(2, "{{");
            }

            ctx.WriteLine(2, "}}");
            ctx.WriteLine();
        }
    }
}